// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package ledstripinterface

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Frame struct {
	Frames               []*Color `protobuf:"bytes,1,rep,name=frames,proto3" json:"frames,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Frame) Reset()         { *m = Frame{} }
func (m *Frame) String() string { return proto.CompactTextString(m) }
func (*Frame) ProtoMessage()    {}
func (*Frame) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *Frame) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Frame.Unmarshal(m, b)
}
func (m *Frame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Frame.Marshal(b, m, deterministic)
}
func (m *Frame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Frame.Merge(m, src)
}
func (m *Frame) XXX_Size() int {
	return xxx_messageInfo_Frame.Size(m)
}
func (m *Frame) XXX_DiscardUnknown() {
	xxx_messageInfo_Frame.DiscardUnknown(m)
}

var xxx_messageInfo_Frame proto.InternalMessageInfo

func (m *Frame) GetFrames() []*Color {
	if m != nil {
		return m.Frames
	}
	return nil
}

type Color struct {
	R                    uint32   `protobuf:"varint,1,opt,name=r,proto3" json:"r,omitempty"`
	G                    uint32   `protobuf:"varint,2,opt,name=g,proto3" json:"g,omitempty"`
	B                    uint32   `protobuf:"varint,3,opt,name=b,proto3" json:"b,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Color) Reset()         { *m = Color{} }
func (m *Color) String() string { return proto.CompactTextString(m) }
func (*Color) ProtoMessage()    {}
func (*Color) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

func (m *Color) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Color.Unmarshal(m, b)
}
func (m *Color) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Color.Marshal(b, m, deterministic)
}
func (m *Color) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Color.Merge(m, src)
}
func (m *Color) XXX_Size() int {
	return xxx_messageInfo_Color.Size(m)
}
func (m *Color) XXX_DiscardUnknown() {
	xxx_messageInfo_Color.DiscardUnknown(m)
}

var xxx_messageInfo_Color proto.InternalMessageInfo

func (m *Color) GetR() uint32 {
	if m != nil {
		return m.R
	}
	return 0
}

func (m *Color) GetG() uint32 {
	if m != nil {
		return m.G
	}
	return 0
}

func (m *Color) GetB() uint32 {
	if m != nil {
		return m.B
	}
	return 0
}

func init() {
	proto.RegisterType((*Frame)(nil), "ledstripinterface.Frame")
	proto.RegisterType((*Color)(nil), "ledstripinterface.Color")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 190 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0x2c, 0xc8, 0xd4,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0xcc, 0x49, 0x4d, 0x29, 0x2e, 0x29, 0xca, 0x2c, 0xc8,
	0xcc, 0x2b, 0x49, 0x2d, 0x4a, 0x4b, 0x4c, 0x4e, 0x95, 0x92, 0x4e, 0xcf, 0xcf, 0x4f, 0xcf, 0x49,
	0xd5, 0x07, 0x2b, 0x48, 0x2a, 0x4d, 0xd3, 0x4f, 0xcd, 0x2d, 0x28, 0xa9, 0x84, 0xa8, 0x57, 0xb2,
	0xe4, 0x62, 0x75, 0x2b, 0x4a, 0xcc, 0x4d, 0x15, 0x32, 0xe0, 0x62, 0x4b, 0x03, 0x31, 0x8a, 0x25,
	0x18, 0x15, 0x98, 0x35, 0xb8, 0x8d, 0x24, 0xf4, 0x30, 0x4c, 0xd2, 0x73, 0xce, 0xcf, 0xc9, 0x2f,
	0x0a, 0x82, 0xaa, 0x53, 0x32, 0xe4, 0x62, 0x05, 0x0b, 0x08, 0xf1, 0x70, 0x31, 0x16, 0x49, 0x30,
	0x2a, 0x30, 0x6a, 0xf0, 0x06, 0x31, 0x82, 0x79, 0xe9, 0x12, 0x4c, 0x10, 0x5e, 0x3a, 0x88, 0x97,
	0x24, 0xc1, 0x0c, 0xe1, 0x25, 0x19, 0x79, 0x70, 0xb1, 0xbb, 0x64, 0x16, 0x17, 0xe4, 0x24, 0x56,
	0x0a, 0xd9, 0x72, 0x71, 0x06, 0x67, 0xe4, 0x97, 0x43, 0x2c, 0xc7, 0x66, 0x19, 0x58, 0x46, 0x4a,
	0x4c, 0x0f, 0xe2, 0x7a, 0x3d, 0x98, 0xeb, 0xf5, 0x5c, 0x41, 0xae, 0x4f, 0x62, 0x03, 0xf3, 0x8d,
	0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xee, 0x8d, 0x4e, 0x30, 0xfb, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DisplayClient is the client API for Display service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DisplayClient interface {
	ShowFrame(ctx context.Context, in *Frame, opts ...grpc.CallOption) (*empty.Empty, error)
}

type displayClient struct {
	cc *grpc.ClientConn
}

func NewDisplayClient(cc *grpc.ClientConn) DisplayClient {
	return &displayClient{cc}
}

func (c *displayClient) ShowFrame(ctx context.Context, in *Frame, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ledstripinterface.Display/ShowFrame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DisplayServer is the server API for Display service.
type DisplayServer interface {
	ShowFrame(context.Context, *Frame) (*empty.Empty, error)
}

// UnimplementedDisplayServer can be embedded to have forward compatible implementations.
type UnimplementedDisplayServer struct {
}

func (*UnimplementedDisplayServer) ShowFrame(ctx context.Context, req *Frame) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowFrame not implemented")
}

func RegisterDisplayServer(s *grpc.Server, srv DisplayServer) {
	s.RegisterService(&_Display_serviceDesc, srv)
}

func _Display_ShowFrame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Frame)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisplayServer).ShowFrame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ledstripinterface.Display/ShowFrame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisplayServer).ShowFrame(ctx, req.(*Frame))
	}
	return interceptor(ctx, in, info, handler)
}

var _Display_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ledstripinterface.Display",
	HandlerType: (*DisplayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShowFrame",
			Handler:    _Display_ShowFrame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
